{% comment %} product-recommendations {% endcomment %}

<div class="bg-white border-b-2 border-black">
  <div class="container mx-auto px-4 md:px-6">
    <div class="py-16 sm:py-24 lg:py-32">
      <h2 class="text-2xl font-extrabold text-gray-900">You may also like</h2>
      <div
        class="product-recommendations"
        data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4"
      >
        {%- if recommendations.performed and recommendations.products_count > 0 -%}
        <div class="mt-8 grid grid-cols-1 gap-y-10 sm:mt-6 sm:grid-cols-2 gap-x-6 lg:grid-cols-3 xl:grid-cols-3 xl:gap-x-8">
          {% liquid
            for product in recommendations.products limit: 6
              render 'product-card', product: product, add_collection_url: true
            endfor
          %}
        </div>
        {%- endif -%}
      </div>
    </div>
  </div>
</div>


{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
  {
    "name": "Product recommendations",
    "settings": []
  }
{% endschema %}
